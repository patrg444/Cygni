version: '3.8'

services:
  api:
    image: cygni/api:latest
    container_name: cygni-api
    restart: unless-stopped
    env_file:
      - .env.production
    ports:
      - "3000:3000"
    environment:
      NODE_ENV: production
      BUILDER_SERVICE_URL: http://builder:3001
      RUNTIME_ORCHESTRATOR_URL: http://runtime-orchestrator:8080
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - cygni-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 512M

  builder:
    image: cygni/builder:latest
    container_name: cygni-builder
    restart: unless-stopped
    env_file:
      - .env.production
    ports:
      - "3001:3001"
    environment:
      NODE_ENV: production
      API_SERVICE_URL: http://api:3000
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - cygni-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 256M

  builder-worker:
    image: cygni/builder-worker:latest
    container_name: cygni-builder-worker-1
    restart: unless-stopped
    env_file:
      - .env.production
    environment:
      NODE_ENV: production
      API_SERVICE_URL: http://api:3000
      BUILD_CONCURRENCY: 5
      WORKER_ID: worker-1
      HEALTH_CHECK_PORT: 9090
    depends_on:
      redis:
        condition: service_healthy
      builder:
        condition: service_healthy
    networks:
      - cygni-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          cpus: '4'
          memory: 4G
        reservations:
          cpus: '1'
          memory: 1G

  # Additional worker instances can be added by duplicating the above with different WORKER_ID

  redis:
    image: redis:7.2-alpine
    container_name: cygni-redis
    restart: unless-stopped
    command: 
      - redis-server
      - --appendonly
      - "yes"
      - --maxmemory
      - "512mb"
      - --maxmemory-policy
      - "allkeys-lru"
      - --requirepass
      - "${REDIS_PASSWORD}"
    volumes:
      - redis_data:/data
    networks:
      - cygni-network
    healthcheck:
      test: ["CMD", "redis-cli", "--pass", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 128M

  # Monitoring stack (optional but recommended)
  prometheus:
    image: prom/prometheus:latest
    container_name: cygni-prometheus
    restart: unless-stopped
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    ports:
      - "9090:9090"
    networks:
      - cygni-network

  grafana:
    image: grafana/grafana:latest
    container_name: cygni-grafana
    restart: unless-stopped
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana-datasources.yml:/etc/grafana/provisioning/datasources/datasources.yml
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    ports:
      - "3003:3000"
    networks:
      - cygni-network
    depends_on:
      - prometheus

  # Log aggregation
  loki:
    image: grafana/loki:latest
    container_name: cygni-loki
    restart: unless-stopped
    volumes:
      - ./monitoring/loki-config.yml:/etc/loki/local-config.yaml
      - loki_data:/loki
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - cygni-network

volumes:
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  loki_data:
    driver: local

networks:
  cygni-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.28.0.0/16