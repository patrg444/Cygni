name: Release Pipeline

on:
  push:
    tags:
      - "v*"
  workflow_dispatch:
    inputs:
      version:
        description: "Version to release (e.g., v1.0.0)"
        required: true

permissions:
  contents: write
  packages: write
  id-token: write

jobs:
  # Build and publish multi-arch images
  release-images:
    name: Release Multi-Arch Images
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [api, auth, builder, runtime-orchestrator]
    steps:
      - uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ghcr.io/${{ github.repository }}-${{ matrix.service }}
            cygni/${{ matrix.service }}
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push multi-arch image
        uses: docker/build-push-action@v5
        with:
          context: ./services/${{ matrix.service }}
          platforms: linux/amd64,linux/arm64,linux/arm/v7
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          sbom: true
          provenance: true

  # Publish Helm charts
  release-helm:
    name: Release Helm Charts
    runs-on: ubuntu-latest
    needs: release-images
    steps:
      - uses: actions/checkout@v4

      - name: Configure Git
        run: |
          git config user.name "$GITHUB_ACTOR"
          git config user.email "$GITHUB_ACTOR@users.noreply.github.com"

      - name: Install Helm
        uses: azure/setup-helm@v3

      - name: Package Helm charts
        run: |
          mkdir -p .charts
          helm package infrastructure/helm/cygni -d .charts
          helm repo index .charts --url https://charts.cygni.dev

      - name: Upload charts to releases
        uses: softprops/action-gh-release@v1
        with:
          files: .charts/*

  # Create GitHub release
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [release-images, release-helm]
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate release notes
        id: release_notes
        uses: orhun/git-cliff-action@v3
        with:
          config: .github/cliff.toml
          args: --latest --strip header
        env:
          OUTPUT: CHANGELOG.md

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          body_path: CHANGELOG.md
          draft: false
          prerelease: ${{ contains(github.ref, '-rc') || contains(github.ref, '-beta') }}
          files: |
            infrastructure/kubernetes/*.yaml
            scripts/install.sh
          generate_release_notes: true

  # Update documentation
  update-docs:
    name: Update Documentation
    runs-on: ubuntu-latest
    needs: create-release
    steps:
      - uses: actions/checkout@v4
        with:
          ref: main

      - name: Update version in docs
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          sed -i "s/version: .*/version: $VERSION/g" docs/docusaurus.config.js
          sed -i "s/cygni@.*/cygni@$VERSION/g" docs/**/*.md

      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v7
        with:
          title: "docs: update version to ${{ github.ref_name }}"
          body: "Automated PR to update documentation for release ${{ github.ref_name }}"
          branch: update-docs-${{ github.ref_name }}
          commit-message: "docs: update version to ${{ github.ref_name }}"

  # Deploy to staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: release-images
    environment: staging
    steps:
      - uses: actions/checkout@v4

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3

      - name: Configure kubectl
        run: |
          echo "${{ secrets.STAGING_KUBECONFIG }}" | base64 -d > /tmp/kubeconfig
          export KUBECONFIG=/tmp/kubeconfig

      - name: Deploy to staging
        run: |
          kubectl set image deployment/api api=ghcr.io/${{ github.repository }}-api:${{ github.ref_name }} -n cygni-staging
          kubectl set image deployment/auth auth=ghcr.io/${{ github.repository }}-auth:${{ github.ref_name }} -n cygni-staging
          kubectl set image deployment/builder builder=ghcr.io/${{ github.repository }}-builder:${{ github.ref_name }} -n cygni-staging
          kubectl rollout status deployment/api -n cygni-staging
          kubectl rollout status deployment/auth -n cygni-staging
          kubectl rollout status deployment/builder -n cygni-staging
