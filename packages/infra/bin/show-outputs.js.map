{"version":3,"file":"show-outputs.js","sourceRoot":"","sources":["show-outputs.ts"],"names":[],"mappings":";;;AACA,iDAAyC;AAEzC;;GAEG;AAEH,MAAM,SAAS,GAAG,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,2BAA2B,CAAC;AAEjE,IAAI,CAAC;IACH,MAAM,OAAO,GAAG,IAAA,wBAAQ,EAAC,mDAAmD,SAAS,4CAA4C,EAAE;QACjI,QAAQ,EAAE,OAAO;KAClB,CAAC,CAAC;IAEH,MAAM,aAAa,GAAG,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;IAE1C,OAAO,CAAC,GAAG,CAAC,uBAAuB,CAAC,CAAC;IAErC,aAAa,CAAC,OAAO,CAAC,CAAC,MAAW,EAAE,EAAE;QACpC,OAAO,CAAC,GAAG,CAAC,GAAG,MAAM,CAAC,SAAS,GAAG,CAAC,CAAC;QACpC,OAAO,CAAC,GAAG,CAAC,KAAK,MAAM,CAAC,WAAW,EAAE,CAAC,CAAC;QACvC,OAAO,CAAC,GAAG,CAAC,YAAY,MAAM,CAAC,WAAW,IAAI,CAAC,CAAC;IAClD,CAAC,CAAC,CAAC;IAEH,oCAAoC;IACpC,MAAM,OAAO,GAAG,aAAa,CAAC,MAAM,CAAC,CAAC,GAAQ,EAAE,MAAW,EAAE,EAAE;QAC7D,GAAG,CAAC,MAAM,CAAC,SAAS,CAAC,GAAG,MAAM,CAAC,WAAW,CAAC;QAC3C,OAAO,GAAG,CAAC;IACb,CAAC,EAAE,EAAE,CAAC,CAAC;IAEP,OAAO,CAAC,GAAG,CAAC,uCAAuC,CAAC,CAAC;IACrD,OAAO,CAAC,GAAG,CAAC,0BAA0B,OAAO,CAAC,gBAAgB,GAAG,CAAC,CAAC;IACnE,OAAO,CAAC,GAAG,CAAC,6BAA6B,OAAO,CAAC,cAAc,GAAG,CAAC,CAAC;IACpE,OAAO,CAAC,GAAG,CAAC,6BAA6B,OAAO,CAAC,cAAc,GAAG,CAAC,CAAC;IACpE,OAAO,CAAC,GAAG,CAAC,iCAAiC,OAAO,CAAC,kBAAkB,GAAG,CAAC,CAAC;IAC5E,OAAO,CAAC,GAAG,CAAC,+BAA+B,OAAO,CAAC,wBAAwB,GAAG,CAAC,CAAC;IAChF,OAAO,CAAC,GAAG,CAAC,gCAAgC,OAAO,CAAC,aAAa,GAAG,CAAC,CAAC;AAExE,CAAC;AAAC,OAAO,KAAK,EAAE,CAAC;IACf,OAAO,CAAC,KAAK,CAAC,uGAAuG,CAAC,CAAC;IACvH,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;AAClB,CAAC","sourcesContent":["#!/usr/bin/env node\nimport { execSync } from 'child_process';\n\n/**\n * Helper script to show stack outputs after deployment\n */\n\nconst stackName = process.argv[2] || 'CygniStagingStack-staging';\n\ntry {\n  const outputs = execSync(`aws cloudformation describe-stacks --stack-name ${stackName} --query 'Stacks[0].Outputs' --output json`, {\n    encoding: 'utf-8'\n  });\n  \n  const parsedOutputs = JSON.parse(outputs);\n  \n  console.log('\\nðŸ“‹ Stack Outputs:\\n');\n  \n  parsedOutputs.forEach((output: any) => {\n    console.log(`${output.OutputKey}:`);\n    console.log(`  ${output.Description}`);\n    console.log(`  Value: ${output.OutputValue}\\n`);\n  });\n  \n  // Create environment variables file\n  const envVars = parsedOutputs.reduce((acc: any, output: any) => {\n    acc[output.OutputKey] = output.OutputValue;\n    return acc;\n  }, {});\n  \n  console.log('\\nðŸ”§ Environment Variables for CLI:\\n');\n  console.log(`export CYGNI_ECR_REPO=\"${envVars.ECRRepositoryUri}\"`);\n  console.log(`export CYGNI_ECS_CLUSTER=\"${envVars.ECSClusterName}\"`);\n  console.log(`export CYGNI_ECS_SERVICE=\"${envVars.ECSServiceName}\"`);\n  console.log(`export CYGNI_FRONTEND_BUCKET=\"${envVars.FrontendBucketName}\"`);\n  console.log(`export CYGNI_CLOUDFRONT_ID=\"${envVars.CloudFrontDistributionId}\"`);\n  console.log(`export CYGNI_CLOUDFRONT_URL=\"${envVars.CloudFrontUrl}\"`);\n  \n} catch (error) {\n  console.error('Failed to get stack outputs. Make sure the stack is deployed and you have AWS credentials configured.');\n  process.exit(1);\n}"]}