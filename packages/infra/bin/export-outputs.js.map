{"version":3,"file":"export-outputs.js","sourceRoot":"","sources":["export-outputs.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AACA,iDAAyC;AACzC,uCAAyB;AACzB,2CAA6B;AAE7B;;GAEG;AAEH,MAAM,SAAS,GAAG,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,2BAA2B,CAAC;AACjE,MAAM,UAAU,GAAG,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,EAAE,kBAAkB,CAAC,CAAC;AAElE,IAAI,CAAC;IACH,OAAO,CAAC,GAAG,CAAC,oCAAoC,SAAS,EAAE,CAAC,CAAC;IAE7D,kCAAkC;IAClC,MAAM,OAAO,GAAG,IAAA,wBAAQ,EACtB,mDAAmD,SAAS,4CAA4C,EACxG,EAAE,QAAQ,EAAE,OAAO,EAAE,CACtB,CAAC;IAEF,MAAM,aAAa,GAAG,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;IAE1C,8BAA8B;IAC9B,MAAM,gBAAgB,GAAG,aAAa,CAAC,MAAM,CAAC,CAAC,GAAQ,EAAE,MAAW,EAAE,EAAE;QACtE,GAAG,CAAC,MAAM,CAAC,SAAS,CAAC,GAAG,MAAM,CAAC,WAAW,CAAC;QAC3C,OAAO,GAAG,CAAC;IACb,CAAC,EAAE,EAAE,CAAC,CAAC;IAEP,8BAA8B;IAC9B,MAAM,UAAU,GAAG;QACjB,CAAC,SAAS,CAAC,EAAE,gBAAgB;KAC9B,CAAC;IAEF,gBAAgB;IAChB,EAAE,CAAC,aAAa,CAAC,UAAU,EAAE,IAAI,CAAC,SAAS,CAAC,UAAU,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC;IAElE,OAAO,CAAC,GAAG,CAAC,0BAA0B,UAAU,EAAE,CAAC,CAAC;IACpD,OAAO,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC;IAC1B,MAAM,CAAC,OAAO,CAAC,gBAAgB,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,GAAG,EAAE,KAAK,CAAC,EAAE,EAAE;QACxD,OAAO,CAAC,GAAG,CAAC,KAAK,GAAG,KAAK,KAAK,EAAE,CAAC,CAAC;IACpC,CAAC,CAAC,CAAC;AAEL,CAAC;AAAC,OAAO,KAAU,EAAE,CAAC;IACpB,OAAO,CAAC,KAAK,CAAC,6BAA6B,EAAE,KAAK,CAAC,OAAO,CAAC,CAAC;IAC5D,OAAO,CAAC,KAAK,CAAC,cAAc,CAAC,CAAC;IAC9B,OAAO,CAAC,KAAK,CAAC,0BAA0B,CAAC,CAAC;IAC1C,OAAO,CAAC,KAAK,CAAC,wCAAwC,CAAC,CAAC;IACxD,OAAO,CAAC,KAAK,CAAC,oCAAoC,CAAC,CAAC;IACpD,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;AAClB,CAAC","sourcesContent":["#!/usr/bin/env node\nimport { execSync } from 'child_process';\nimport * as fs from 'fs';\nimport * as path from 'path';\n\n/**\n * Exports CDK stack outputs to a JSON file for use by the CLI\n */\n\nconst stackName = process.argv[2] || 'CygniStagingStack-staging';\nconst outputFile = path.join(__dirname, '..', 'cdk.outputs.json');\n\ntry {\n  console.log(`üìã Exporting outputs from stack: ${stackName}`);\n  \n  // Get stack outputs using AWS CLI\n  const outputs = execSync(\n    `aws cloudformation describe-stacks --stack-name ${stackName} --query 'Stacks[0].Outputs' --output json`,\n    { encoding: 'utf-8' }\n  );\n  \n  const parsedOutputs = JSON.parse(outputs);\n  \n  // Convert to key-value format\n  const formattedOutputs = parsedOutputs.reduce((acc: any, output: any) => {\n    acc[output.OutputKey] = output.OutputValue;\n    return acc;\n  }, {});\n  \n  // Create the output structure\n  const exportData = {\n    [stackName]: formattedOutputs\n  };\n  \n  // Write to file\n  fs.writeFileSync(outputFile, JSON.stringify(exportData, null, 2));\n  \n  console.log(`‚úÖ Outputs exported to: ${outputFile}`);\n  console.log('\\nOutputs:');\n  Object.entries(formattedOutputs).forEach(([key, value]) => {\n    console.log(`  ${key}: ${value}`);\n  });\n  \n} catch (error: any) {\n  console.error('‚ùå Failed to export outputs:', error.message);\n  console.error('\\nMake sure:');\n  console.error('1. The stack is deployed');\n  console.error('2. You have AWS credentials configured');\n  console.error('3. You have the correct stack name');\n  process.exit(1);\n}"]}