{"version":3,"file":"cygni-staging-stack.js","sourceRoot":"","sources":["cygni-staging-stack.ts"],"names":[],"mappings":"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","sourcesContent":["import * as cdk from 'aws-cdk-lib';\nimport { Construct } from 'constructs';\nimport * as ec2 from 'aws-cdk-lib/aws-ec2';\nimport * as rds from 'aws-cdk-lib/aws-rds';\nimport * as ecs from 'aws-cdk-lib/aws-ecs';\nimport * as ecs_patterns from 'aws-cdk-lib/aws-ecs-patterns';\nimport * as s3 from 'aws-cdk-lib/aws-s3';\nimport * as cloudfront from 'aws-cdk-lib/aws-cloudfront';\nimport * as origins from 'aws-cdk-lib/aws-cloudfront-origins';\nimport * as iam from 'aws-cdk-lib/aws-iam';\nimport * as ecr from 'aws-cdk-lib/aws-ecr';\nimport * as secretsmanager from 'aws-cdk-lib/aws-secretsmanager';\n\nexport class CygniStagingStack extends cdk.Stack {\n  constructor(scope: Construct, id: string, props?: cdk.StackProps) {\n    super(scope, id, props);\n    \n    // Get environment name from context\n    const envName = this.node.tryGetContext('envName') || 'staging';\n\n    // 1. VPC for networking\n    const vpc = new ec2.Vpc(this, 'CygniVPC', {\n      maxAzs: 2,\n      natGateways: 1,\n      subnetConfiguration: [\n        {\n          cidrMask: 24,\n          name: 'Public',\n          subnetType: ec2.SubnetType.PUBLIC,\n        },\n        {\n          cidrMask: 24,\n          name: 'Private',\n          subnetType: ec2.SubnetType.PRIVATE_WITH_EGRESS,\n        },\n        {\n          cidrMask: 28,\n          name: 'Isolated',\n          subnetType: ec2.SubnetType.PRIVATE_ISOLATED,\n        },\n      ],\n    });\n\n    // 2. RDS Aurora Serverless v2 for database\n    const dbSecret = new secretsmanager.Secret(this, 'DBSecret', {\n      description: 'Database credentials',\n      generateSecretString: {\n        secretStringTemplate: JSON.stringify({ username: 'cygnidbadmin' }),\n        generateStringKey: 'password',\n        excludeCharacters: ' %+~`#$&*()|[]{}:;<>?!\\'/@\"\\\\',\n      },\n    });\n\n    const dbCluster = new rds.DatabaseCluster(this, 'Database', {\n      engine: rds.DatabaseClusterEngine.auroraPostgres({\n        version: rds.AuroraPostgresEngineVersion.VER_15_3,\n      }),\n      writer: rds.ClusterInstance.serverlessV2('writer', {\n        scaleWithWriter: true,\n      }),\n      serverlessV2MinCapacity: 0.5,\n      serverlessV2MaxCapacity: 1,\n      credentials: rds.Credentials.fromSecret(dbSecret),\n      vpc,\n      vpcSubnets: {\n        subnetType: ec2.SubnetType.PRIVATE_ISOLATED,\n      },\n      defaultDatabaseName: 'cygnidb',\n      enableDataApi: true,\n      removalPolicy: cdk.RemovalPolicy.DESTROY,\n    });\n\n    // 3. ECR Repository for backend images\n    const ecrRepository = new ecr.Repository(this, 'BackendRepository', {\n      repositoryName: `cygni-backend-${envName}`,\n      removalPolicy: cdk.RemovalPolicy.DESTROY,\n      autoDeleteImages: true,\n    });\n\n    // 4. ECS Fargate cluster and service\n    const cluster = new ecs.Cluster(this, 'EcsCluster', {\n      vpc,\n      containerInsights: true,\n    });\n\n    // Create task definition\n    const taskDefinition = new ecs.FargateTaskDefinition(this, 'BackendTaskDef', {\n      memoryLimitMiB: 512,\n      cpu: 256,\n    });\n\n    // Add container to task definition\n    const container = taskDefinition.addContainer('backend', {\n      image: ecs.ContainerImage.fromEcrRepository(ecrRepository, 'latest'),\n      logging: ecs.LogDrivers.awsLogs({\n        streamPrefix: 'cygni-backend',\n      }),\n      environment: {\n        NODE_ENV: 'production',\n        PORT: '3000',\n        DATABASE_NAME: 'cygnidb',\n      },\n      secrets: {\n        DATABASE_URL: ecs.Secret.fromSecretsManager(dbSecret, 'password'),\n      },\n    });\n\n    container.addPortMappings({\n      containerPort: 3000,\n      protocol: ecs.Protocol.TCP,\n    });\n\n    // Create Fargate service with ALB\n    const fargateService = new ecs_patterns.ApplicationLoadBalancedFargateService(this, 'BackendService', {\n      cluster,\n      taskDefinition,\n      publicLoadBalancer: true,\n      desiredCount: 1,\n      assignPublicIp: false,\n      healthCheckGracePeriod: cdk.Duration.seconds(60),\n    });\n\n    // Allow backend to connect to database\n    dbCluster.connections.allowDefaultPortFrom(fargateService.service.connections);\n\n    // 5. S3 bucket for frontend static files\n    const frontendBucket = new s3.Bucket(this, 'FrontendBucket', {\n      bucketName: `cygni-frontend-${envName}-${this.account}-${this.region}`,\n      websiteIndexDocument: 'index.html',\n      websiteErrorDocument: 'error.html',\n      publicReadAccess: false,\n      blockPublicAccess: s3.BlockPublicAccess.BLOCK_ALL,\n      removalPolicy: cdk.RemovalPolicy.DESTROY,\n      autoDeleteObjects: true,\n      cors: [\n        {\n          allowedHeaders: ['*'],\n          allowedMethods: [s3.HttpMethods.GET, s3.HttpMethods.HEAD],\n          allowedOrigins: ['*'],\n          maxAge: 3000,\n        },\n      ],\n    });\n\n    // 6. CloudFront distribution for frontend\n    const originAccessIdentity = new cloudfront.OriginAccessIdentity(this, 'OAI');\n    frontendBucket.grantRead(originAccessIdentity);\n\n    const distribution = new cloudfront.Distribution(this, 'FrontendDistribution', {\n      defaultBehavior: {\n        origin: new origins.S3Origin(frontendBucket, {\n          originAccessIdentity,\n        }),\n        viewerProtocolPolicy: cloudfront.ViewerProtocolPolicy.REDIRECT_TO_HTTPS,\n        cachePolicy: cloudfront.CachePolicy.CACHING_OPTIMIZED,\n        compress: true,\n        allowedMethods: cloudfront.AllowedMethods.ALLOW_GET_HEAD_OPTIONS,\n      },\n      additionalBehaviors: {\n        '/api/*': {\n          origin: new origins.HttpOrigin(fargateService.loadBalancer.loadBalancerDnsName, {\n            protocolPolicy: cloudfront.OriginProtocolPolicy.HTTP_ONLY,\n          }),\n          viewerProtocolPolicy: cloudfront.ViewerProtocolPolicy.REDIRECT_TO_HTTPS,\n          cachePolicy: cloudfront.CachePolicy.CACHING_DISABLED,\n          originRequestPolicy: cloudfront.OriginRequestPolicy.ALL_VIEWER,\n          allowedMethods: cloudfront.AllowedMethods.ALLOW_ALL,\n        },\n      },\n      defaultRootObject: 'index.html',\n      errorResponses: [\n        {\n          httpStatus: 404,\n          responseHttpStatus: 200,\n          responsePagePath: '/index.html',\n          ttl: cdk.Duration.seconds(0),\n        },\n      ],\n    });\n\n    // Create deployment user for CI/CD\n    const deploymentUser = new iam.User(this, 'DeploymentUser', {\n      userName: 'cygni-deployment-user',\n    });\n\n    // Grant permissions to deployment user\n    ecrRepository.grantPullPush(deploymentUser);\n    frontendBucket.grantReadWrite(deploymentUser);\n    \n    // Grant ECS update permissions\n    deploymentUser.addToPolicy(new iam.PolicyStatement({\n      actions: [\n        'ecs:UpdateService',\n        'ecs:DescribeServices',\n        'ecs:DescribeTaskDefinition',\n        'ecs:RegisterTaskDefinition',\n        'ecs:ListTaskDefinitions',\n        'ecs:DescribeClusters',\n      ],\n      resources: [\n        fargateService.service.serviceArn,\n        `arn:aws:ecs:${this.region}:${this.account}:task-definition/CygniStagingStack*`,\n        cluster.clusterArn,\n      ],\n    }));\n\n    // Grant IAM PassRole for task execution role\n    deploymentUser.addToPolicy(new iam.PolicyStatement({\n      actions: ['iam:PassRole'],\n      resources: [\n        taskDefinition.executionRole!.roleArn,\n        taskDefinition.taskRole.roleArn,\n      ],\n    }));\n\n    // Outputs\n    new cdk.CfnOutput(this, 'VPCId', {\n      value: vpc.vpcId,\n      description: 'VPC ID',\n    });\n\n    new cdk.CfnOutput(this, 'DatabaseEndpoint', {\n      value: dbCluster.clusterEndpoint.hostname,\n      description: 'Database endpoint',\n    });\n\n    new cdk.CfnOutput(this, 'DatabaseSecretArn', {\n      value: dbSecret.secretArn,\n      description: 'Database secret ARN',\n    });\n\n    new cdk.CfnOutput(this, 'ECRRepositoryUri', {\n      value: ecrRepository.repositoryUri,\n      description: 'ECR repository URI',\n    });\n\n    new cdk.CfnOutput(this, 'ECSClusterName', {\n      value: cluster.clusterName,\n      description: 'ECS cluster name',\n    });\n\n    new cdk.CfnOutput(this, 'ECSServiceName', {\n      value: fargateService.service.serviceName,\n      description: 'ECS service name',\n    });\n\n    new cdk.CfnOutput(this, 'LoadBalancerUrl', {\n      value: `http://${fargateService.loadBalancer.loadBalancerDnsName}`,\n      description: 'Load balancer URL',\n    });\n\n    new cdk.CfnOutput(this, 'FrontendBucketName', {\n      value: frontendBucket.bucketName,\n      description: 'Frontend S3 bucket name',\n    });\n\n    new cdk.CfnOutput(this, 'CloudFrontUrl', {\n      value: `https://${distribution.distributionDomainName}`,\n      description: 'CloudFront distribution URL',\n    });\n\n    new cdk.CfnOutput(this, 'CloudFrontDistributionId', {\n      value: distribution.distributionId,\n      description: 'CloudFront distribution ID',\n    });\n\n    new cdk.CfnOutput(this, 'DeploymentUserName', {\n      value: deploymentUser.userName,\n      description: 'Deployment IAM user name',\n    });\n  }\n}"]}