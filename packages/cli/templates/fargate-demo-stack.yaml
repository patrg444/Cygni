AWSTemplateFormatVersion: '2010-09-09'
Description: 'Cygni Demo Stack - Simplified Fargate Service with ALB'

Parameters:
  AppName:
    Type: String
    Description: Application name (will be used as subdomain)
    AllowedPattern: ^[a-z0-9-]+$
    ConstraintDescription: Must be lowercase alphanumeric with hyphens
    
  ImageUri:
    Type: String
    Description: Docker image URI in ECR
    
  ServicePort:
    Type: Number
    Description: Port the container listens on
    Default: 3000
    
  HealthCheckPath:
    Type: String
    Description: Health check endpoint path
    Default: /health
    
  HostedZoneId:
    Type: String
    Description: Route53 Hosted Zone ID for cx-demo.xyz
    Default: Z0123456789ABCDEFGHIJ  # Replace with actual zone ID
    
  CertificateArn:
    Type: String
    Description: ACM Certificate ARN for *.cx-demo.xyz
    Default: arn:aws:acm:us-east-1:123456789012:certificate/12345678-1234  # Replace with actual cert

Resources:
  # Use default VPC for demo simplicity
  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for ALB
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub ${AppName}-alb-sg

  ECSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for ECS tasks
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: !Ref ServicePort
          ToPort: !Ref ServicePort
          SourceSecurityGroupId: !Ref ALBSecurityGroup
      Tags:
        - Key: Name
          Value: !Sub ${AppName}-ecs-sg

  # Load Balancer
  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub ${AppName}-alb
      Scheme: internet-facing
      Type: application
      SecurityGroups:
        - !Ref ALBSecurityGroup

  # DNS Record
  DNSRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref HostedZoneId
      Name: !Sub ${AppName}.cx-demo.xyz
      Type: A
      AliasTarget:
        DNSName: !GetAtt ApplicationLoadBalancer.DNSName
        HostedZoneId: !GetAtt ApplicationLoadBalancer.CanonicalHostedZoneID

  # Target Group
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub ${AppName}-tg
      Port: !Ref ServicePort
      Protocol: HTTP
      TargetType: ip
      HealthCheckEnabled: true
      HealthCheckPath: !Ref HealthCheckPath
      HealthCheckProtocol: HTTP
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 10
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 3
      Matcher:
        HttpCode: 200-299

  # ALB Listeners
  HTTPListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: redirect
          RedirectConfig:
            Protocol: HTTPS
            Port: 443
            StatusCode: HTTP_301

  HTTPSListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 443
      Protocol: HTTPS
      Certificates:
        - CertificateArn: !Ref CertificateArn
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup

  # ECS Cluster
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub ${AppName}-cluster
      CapacityProviders:
        - FARGATE
      ClusterSettings:
        - Name: containerInsights
          Value: enabled

  # CloudWatch Log Group
  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /ecs/${AppName}
      RetentionInDays: 3

  # Task Execution Role
  TaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy

  # Task Definition
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub ${AppName}-task
      Cpu: '256'
      Memory: '512'
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn: !GetAtt TaskExecutionRole.Arn
      ContainerDefinitions:
        - Name: app
          Image: !Ref ImageUri
          PortMappings:
            - ContainerPort: !Ref ServicePort
          Essential: true
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: ecs
          Environment:
            - Name: NODE_ENV
              Value: production
            - Name: PORT
              Value: !Ref ServicePort

  # ECS Service
  ECSService:
    Type: AWS::ECS::Service
    DependsOn:
      - HTTPSListener
    Properties:
      ServiceName: !Sub ${AppName}-service
      Cluster: !Ref ECSCluster
      TaskDefinition: !Ref TaskDefinition
      DesiredCount: 1
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          SecurityGroups:
            - !Ref ECSSecurityGroup
          AssignPublicIp: ENABLED
      LoadBalancers:
        - ContainerName: app
          ContainerPort: !Ref ServicePort
          TargetGroupArn: !Ref TargetGroup
      HealthCheckGracePeriodSeconds: 60

Outputs:
  ApplicationURL:
    Description: URL of the deployed application
    Value: !Sub https://${AppName}.cx-demo.xyz
    
  ServiceArn:
    Description: ECS Service ARN
    Value: !Ref ECSService
    Export:
      Name: !Sub ${AppName}-service-arn
    
  TaskDefinitionArn:
    Description: Task Definition ARN for rollbacks
    Value: !Ref TaskDefinition
    Export:
      Name: !Sub ${AppName}-task-definition